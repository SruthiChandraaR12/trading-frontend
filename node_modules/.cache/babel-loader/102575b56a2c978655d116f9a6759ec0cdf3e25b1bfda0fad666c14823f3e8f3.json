{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../api/axios';\nexport const fetchTrades = createAsyncThunk('trades/fetchTrades', async () => {\n  const res = await api.get('/trades');\n  return res.data;\n});\nexport const createTrade = createAsyncThunk('trades/createTrade', async trade => {\n  const res = await api.post('/trades', trade);\n  return res.data;\n});\nexport const updateTrade = createAsyncThunk('trades/updateTrade', async ({\n  id,\n  trade\n}) => {\n  const res = await api.put(`/trades/${id}`, trade);\n  return res.data;\n});\nexport const deleteTrade = createAsyncThunk('trades/deleteTrade', async id => {\n  await api.delete(`/trades/${id}`);\n  return id;\n});\nconst tradesSlice = createSlice({\n  name: 'trades',\n  initialState: {\n    items: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchTrades.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchTrades.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.items = action.payload;\n    }).addCase(fetchTrades.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(createTrade.fulfilled, (state, action) => {\n      state.items.unshift(action.payload);\n    }).addCase(updateTrade.fulfilled, (state, action) => {\n      const idx = state.items.findIndex(t => t._id === action.payload._id);\n      if (idx >= 0) state.items[idx] = action.payload;\n    }).addCase(deleteTrade.fulfilled, (state, action) => {\n      state.items = state.items.filter(t => t._id !== action.payload);\n    });\n  }\n});\nexport default tradesSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","api","fetchTrades","res","get","data","createTrade","trade","post","updateTrade","id","put","deleteTrade","delete","tradesSlice","name","initialState","items","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","unshift","idx","findIndex","t","_id","filter","reducer"],"sources":["D:/EI/trading-management/frontend/src/features/trades/tradesSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport api from '../../api/axios';\n\nexport const fetchTrades = createAsyncThunk('trades/fetchTrades', async () => {\n  const res = await api.get('/trades');\n  return res.data;\n});\n\nexport const createTrade = createAsyncThunk('trades/createTrade', async (trade) => {\n  const res = await api.post('/trades', trade);\n  return res.data;\n});\n\nexport const updateTrade = createAsyncThunk('trades/updateTrade', async ({ id, trade }) => {\n  const res = await api.put(`/trades/${id}`, trade);\n  return res.data;\n});\n\nexport const deleteTrade = createAsyncThunk('trades/deleteTrade', async (id) => {\n  await api.delete(`/trades/${id}`);\n  return id;\n});\n\nconst tradesSlice = createSlice({\n  name: 'trades',\n  initialState: { items: [], status: 'idle', error: null },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchTrades.pending, (state) => { state.status = 'loading'; })\n      .addCase(fetchTrades.fulfilled, (state, action) => { state.status = 'succeeded'; state.items = action.payload; })\n      .addCase(fetchTrades.rejected, (state, action) => { state.status = 'failed'; state.error = action.error.message; })\n      .addCase(createTrade.fulfilled, (state, action) => { state.items.unshift(action.payload); })\n      .addCase(updateTrade.fulfilled, (state, action) => {\n        const idx = state.items.findIndex(t => t._id === action.payload._id);\n        if (idx >= 0) state.items[idx] = action.payload;\n      })\n      .addCase(deleteTrade.fulfilled, (state, action) => {\n        state.items = state.items.filter(t => t._id !== action.payload);\n      });\n  }\n});\n\nexport default tradesSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}